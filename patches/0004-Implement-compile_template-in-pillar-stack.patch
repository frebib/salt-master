From a9cc20aa6989b98af97b19ed121899f6b9b7ba0a Mon Sep 17 00:00:00 2001
From: Joe Groocock <me@frebib.net>
Date: Sat, 11 Jul 2020 15:34:11 +0100
Subject: Implement compile_template in pillar stack

Replace the existing hard-coded Jinja environment and YAML parsing with
Salt built-in templates.compile_template functionality. It allows for
multiple types of templates, not just jinja|yaml. It also keeps the
Jinja environment/configuration aligned with that used in normal sls
templates.

This change has some functional differences, of which the most important
and breaking are:
- Jinja templates are rendered as normal sls would be, with
  StrictUndefined being the default, unless that option is otherwise
  overriden in the minion/master opts.
- Jinja global dunders __salt__, __opts__, __grains__, __pillar__ etc
  are now referenced as normal variables: salt, opts, grains, pillar
  with the exception of __stack__ and stack being independent entities.
  __stack__ remains as a dict of template functions to remain consistent
  with the existing pillar stack behaviour.

Signed-off-by: Joe Groocock <me@frebib.net>
---
 salt/pillar/stack.py | 79 +++++++++++++++++++++++++-------------------
 1 file changed, 45 insertions(+), 34 deletions(-)

diff --git a/salt/pillar/stack.py b/salt/pillar/stack.py
index d3531db1bc..f37074007a 100644
--- a/salt/pillar/stack.py
+++ b/salt/pillar/stack.py
@@ -381,12 +381,12 @@ import functools
 import glob
 import logging
 import os
-import posixpath
 
+import salt.template
 import salt.utils.data
 import salt.utils.jinja
+import salt.utils.stringio
 import salt.utils.yaml
-from jinja2 import Environment, FileSystemLoader
 
 # Import Salt libs
 from salt.ext import six
@@ -422,31 +422,32 @@ def ext_pillar(minion_id, pillar, *args, **kwargs):
     return stack
 
 
-def _to_unix_slashes(path):
-    return posixpath.join(*path.split(os.sep))
-
-
 def _process_stack_cfg(cfg, stack, minion_id, pillar):
-    log.debug("Config: %s", cfg)
-    basedir, filename = os.path.split(cfg)
-    jenv = Environment(
-        loader=FileSystemLoader(basedir),
-        extensions=["jinja2.ext.do", salt.utils.jinja.SerializerExtension],
+    default_renderer = "jinja|yaml"
+    renderers = salt.loader.render(__opts__, __salt__)
+
+    tmpl_args = {
+        "__stack__": {
+            "traverse": salt.utils.data.traverse_dict_and_list,
+            "cfg_path": cfg,
+        },
+        "minion_id": minion_id,
+        "pillar": pillar,
+    }
+
+    stack_cfg = salt.template.compile_template(
+        cfg,
+        renderers,
+        "jinja",
+        __opts__["renderer_blacklist"],
+        __opts__["renderer_whitelist"],
+        saltenv=None,
+        stack=stack,
+        **tmpl_args,
     )
-    jenv.globals.update(
-        {
-            "__opts__": __opts__,
-            "__salt__": __salt__,
-            "__grains__": __grains__,
-            "__stack__": {
-                "traverse": salt.utils.data.traverse_dict_and_list,
-                "cfg_path": cfg,
-            },
-            "minion_id": minion_id,
-            "pillar": pillar,
-        }
-    )
-    for item in _parse_stack_cfg(jenv.get_template(filename).render(stack=stack)):
+
+    basedir = os.path.dirname(cfg)
+    for item in _parse_stack_cfg(stack_cfg):
         if not item.strip():
             continue  # silently ignore whitespace or empty lines
         paths = glob.glob(os.path.join(basedir, item))
@@ -459,12 +460,18 @@ def _process_stack_cfg(cfg, stack, minion_id, pillar):
             )
             continue
         for path in sorted(paths):
-            log.debug("YAML: basedir=%s, path=%s", basedir, path)
-            # FileSystemLoader always expects unix-style paths
-            unix_path = _to_unix_slashes(os.path.relpath(path, basedir))
-            obj = salt.utils.yaml.safe_load(
-                jenv.get_template(unix_path).render(stack=stack, ymlpath=path)
+            ret = salt.template.compile_template(
+                path,
+                renderers,
+                default_renderer,
+                __opts__["renderer_blacklist"],
+                __opts__["renderer_whitelist"],
+                saltenv=None,
+                stack=stack,
+                **tmpl_args,
             )
+
+            obj = ret.read() if salt.utils.stringio.is_readable(ret) else ret
             if not isinstance(obj, dict):
                 log.info(
                     'Ignoring pillar stack template "%s": Can\'t parse '
@@ -546,10 +553,14 @@ def _parse_stack_cfg(content):
     """
     Allow top level cfg to be YAML
     """
+    if salt.utils.stringio.is_readable(content):
+        content = content.getvalue()
     try:
-        obj = salt.utils.yaml.safe_load(content)
-        if isinstance(obj, list):
-            return obj
-    except Exception as e:  # pylint: disable=broad-except
+        content = salt.utils.yaml.safe_load(content)
+    except salt.utils.yaml.YAMLError as err:
         pass
+    if isinstance(content, list):
+        return content
+    # FIXME: handle stack.cfg mapping type
+    # Fallback to just treating the blob as a list of file globs/names
     return content.splitlines()
-- 
2.30.0

