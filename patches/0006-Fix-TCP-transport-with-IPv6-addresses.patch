From 10b4e3ddda50d56788d1de2abb21e63f7ee34d22 Mon Sep 17 00:00:00 2001
From: Joe Groocock <me@frebib.net>
Date: Sat, 11 Jul 2020 17:57:40 +0100
Subject: Fix TCP transport with IPv6 addresses

Replace AF_INET with socket.getaddrinfo() to resolve the correct address
family for the given address.

Only call ip_bracket() when the brackets are actually required, instead
of always by default. Raw IPv6 addresses are required most of the time,
and brackets are only required when representing the address with the
port, or as a part of a URI.

Use the provided address family inside TCPClientKeepAlive
_create_stream() instead of blindly assuming AF_INET

Signed-off-by: Joe Groocock <me@frebib.net>
---
 salt/cli/daemons.py   |  3 ++-
 salt/minion.py        |  2 +-
 salt/transport/tcp.py | 40 +++++++++++++++++++++++++++++-----------
 salt/utils/network.py |  2 +-
 4 files changed, 33 insertions(+), 14 deletions(-)

diff --git a/salt/cli/daemons.py b/salt/cli/daemons.py
index 0a1a0994d0..e72db2010b 100644
--- a/salt/cli/daemons.py
+++ b/salt/cli/daemons.py
@@ -188,7 +188,8 @@ class Master(
             self.config["ret_port"],
         ):
             self.shutdown(4, "The ports are not available to bind")
-        self.config["interface"] = ip_bracket(self.config["interface"])
+        if self.config['transport'].lower() != 'tcp':
+            self.config["interface"] = ip_bracket(self.config["interface"])
         migrations.migrate_paths(self.config)
 
         # Late import so logging works correctly
diff --git a/salt/minion.py b/salt/minion.py
index 570e44680c..b70db250bc 100644
--- a/salt/minion.py
+++ b/salt/minion.py
@@ -234,7 +234,7 @@ def resolve_dns(opts, fallback=True):
             "Using %d as source port for the master pub", ret["source_publish_port"]
         )
     ret["master_uri"] = "tcp://{ip}:{port}".format(
-        ip=ret["master_ip"], port=opts["master_port"]
+        ip=salt.utils.zeromq.ip_bracket(ret["master_ip"]), port=opts["master_port"]
     )
     log.debug("Master URI: %s", ret["master_uri"])
 
diff --git a/salt/transport/tcp.py b/salt/transport/tcp.py
index 80e6141c33..a4a45b3415 100644
--- a/salt/transport/tcp.py
+++ b/salt/transport/tcp.py
@@ -44,6 +44,7 @@ import salt.utils.msgpack
 import salt.utils.platform
 import salt.utils.process
 import salt.utils.verify
+import salt.utils.zeromq
 from salt.exceptions import SaltClientError, SaltReqTimeoutError
 from salt.ext import six
 from salt.ext.six.moves import queue  # pylint: disable=import-error
@@ -201,11 +202,17 @@ if USE_LOAD_BALANCER:
             """
             Start the load balancer
             """
-            self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+            af, stype, proto, unused, sa = socket.getaddrinfo(
+                self.opts["interface"],
+                int(self.opts["ret_port"]),
+                socket.AF_UNSPEC,
+                socket.SOCK_STREAM,
+            )[0]
+            self._socket = socket.socket(af, stype, proto)
             self._socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
             _set_tcp_keepalive(self._socket, self.opts)
             self._socket.setblocking(1)
-            self._socket.bind((self.opts["interface"], int(self.opts["ret_port"])))
+            self._socket.bind(sa)
             self._socket.listen(self.backlog)
 
             while True:
@@ -311,12 +318,11 @@ class AsyncTCPReqChannel(salt.transport.client.ReqChannel):
         resolver = kwargs.get("resolver")
 
         parse = urlparse.urlparse(self.opts["master_uri"])
-        master_host, master_port = parse.netloc.rsplit(":", 1)
-        self.master_addr = (master_host, int(master_port))
+        self.master_addr = (parse.hostname, parse.port,)
         self._closing = False
         self.message_client = SaltMessageClientPool(
             self.opts,
-            args=(self.opts, master_host, int(master_port),),
+            args=(self.opts, parse.hostname, parse.port,),
             kwargs={
                 "io_loop": self.io_loop,
                 "resolver": resolver,
@@ -704,11 +710,17 @@ class TCPReqServerChannel(
                 LoadBalancerServer, args=(self.opts, self.socket_queue)
             )
         elif not salt.utils.platform.is_windows():
-            self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+            af, stype, proto, unused, sa = socket.getaddrinfo(
+                self.opts["interface"],
+                int(self.opts["ret_port"]),
+                socket.AF_UNSPEC,
+                socket.SOCK_STREAM,
+            )[0]
+            self._socket = socket.socket(af, stype, proto)
             self._socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
             _set_tcp_keepalive(self._socket, self.opts)
             self._socket.setblocking(0)
-            self._socket.bind((self.opts["interface"], int(self.opts["ret_port"])))
+            self._socket.bind(sa)
 
     def post_fork(self, payload_handler, io_loop):
         """
@@ -981,7 +993,7 @@ class TCPClientKeepAlive(salt.ext.tornado.tcpclient.TCPClient):
         """
         # Always connect in plaintext; we'll convert to ssl if necessary
         # after one connection has completed.
-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+        sock = socket.socket(af, socket.SOCK_STREAM)
         _set_tcp_keepalive(sock, self.opts)
         stream = salt.ext.tornado.iostream.IOStream(
             sock, max_buffer_size=max_buffer_size
@@ -1234,7 +1246,7 @@ class SaltMessageClient(object):
                 except salt.ext.tornado.iostream.StreamClosedError as e:
                     log.debug(
                         "tcp stream to %s:%s closed, unable to recv",
-                        self.host,
+                        salt.utils.zeromq.ip_bracket(self.host),
                         self.port,
                     )
                     for future in six.itervalues(self.send_future_map):
@@ -1625,11 +1637,17 @@ class TCPPubServerChannel(salt.transport.server.PubServerChannel):
 
         # Spin up the publisher
         pub_server = PubServer(self.opts, io_loop=self.io_loop)
-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+        af, stype, proto, unused, sa = socket.getaddrinfo(
+            self.opts["interface"],
+            int(self.opts["publish_port"]),
+            socket.AF_UNSPEC,
+            socket.SOCK_STREAM,
+        )[0]
+        sock = socket.socket(af, stype, proto)
         sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
         _set_tcp_keepalive(sock, self.opts)
         sock.setblocking(0)
-        sock.bind((self.opts["interface"], int(self.opts["publish_port"])))
+        sock.bind(sa)
         sock.listen(self.backlog)
         # pub_server will take ownership of the socket
         pub_server.add_socket(sock)
diff --git a/salt/utils/network.py b/salt/utils/network.py
index b3e8db3886..2f9c707aba 100644
--- a/salt/utils/network.py
+++ b/salt/utils/network.py
@@ -2087,7 +2087,7 @@ def dns_check(addr, port, safe=False, ipv6=None):
             raise SaltClientError()
         raise SaltSystemExit(code=42, msg=err)
 
-    return salt.utils.zeromq.ip_bracket(ip_addrs[0])
+    return ip_addrs[0]
 
 
 def _test_addrs(addrinfo, port):
-- 
2.30.0

